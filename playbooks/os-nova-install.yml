---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Prepare MQ/DB services
  hosts: nova_conductor
  gather_facts: no
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  tags:
    - nova
  tasks:

    - name: Configure rabbitmq vhost/user (nova)
      include: common-tasks/rabbitmq-vhost-user.yml
      vars:
        user: "{{ nova_rabbitmq_userid }}"
        password: "{{ nova_rabbitmq_password }}"
        vhost: "{{ nova_rabbitmq_vhost }}"
        _rabbitmq_host_group: "{{ nova_rabbitmq_host_group }}"
      when:
        - groups[nova_rabbitmq_host_group] | length > 0
      run_once: yes

    - name: Configure rabbitmq vhost/user (nova/telemetry)
      include: common-tasks/rabbitmq-vhost-user.yml
      vars:
        user: "{{ nova_rabbitmq_telemetry_userid }}"
        password: "{{ nova_rabbitmq_telemetry_password }}"
        vhost: "{{ nova_rabbitmq_telemetry_vhost }}"
        _rabbitmq_host_group: "{{ nova_rabbitmq_telemetry_host_group }}"
      when:
        - nova_ceilometer_enabled | bool
        - groups[nova_rabbitmq_telemetry_host_group] is defined
        - groups[nova_rabbitmq_telemetry_host_group] | length > 0
        - groups[nova_rabbitmq_telemetry_host_group] != groups[nova_rabbitmq_host_group]
      run_once: yes

    - name: Configure MySQL user (nova)
      include: common-tasks/mysql-db-user.yml
      vars:
        user_name: "{{ nova_galera_user }}"
        password: "{{ nova_container_mysql_password }}"
        login_host: "{{ nova_galera_address }}"
        db_name: "{{ nova_galera_database }}"
      run_once: yes

    - name: Configure MySQL user (nova-api)
      include: common-tasks/mysql-db-user.yml
      vars:
        user_name: "{{ nova_api_galera_user }}"
        password: "{{ nova_api_container_mysql_password }}"
        login_host: "{{ nova_api_galera_address }}"
        db_name: "{{ nova_api_galera_database }}"
        db_append_privs: "yes"
      run_once: yes

    - name: Configure MySQL user (nova-placement)
      include: common-tasks/mysql-db-user.yml
      vars:
        user_name: "{{ nova_placement_galera_user }}"
        password: "{{ nova_placement_container_mysql_password }}"
        login_host: "{{ nova_placement_galera_address }}"
        db_name: "{{ nova_placement_galera_database }}"
      run_once: yes

    - name: Configure MySQL user (nova-api cell0)
      include: common-tasks/mysql-db-user.yml
      vars:
        user_name: "{{ nova_api_galera_user }}"
        password: "{{ nova_api_container_mysql_password }}"
        login_host: "{{ nova_api_galera_address }}"
        db_name: "{{ nova_cell0_database }}"
        db_append_privs: "yes"
      run_once: yes



- name: Install nova-conductor services
  include: common-playbooks/nova.yml
  vars:
    nova_hosts: "nova_conductor"
    nova_serial: "{{ nova_conductor_serial | default(['1', '100%']) }}"



- name: Install nova-scheduler/nova-consoleauth services
  include: common-playbooks/nova.yml
  vars:
    nova_hosts: "nova_scheduler:nova_consoleauth:!nova_conductor"
    nova_serial: "{{ nova_scheduler_serial | default(['1', '100%']) }}"



- name: Install nova API services
  include: common-playbooks/nova.yml
  vars:
    nova_hosts: "nova_api_os_compute:nova_api_placement:!nova_conductor:!nova_scheduler:!nova_consoleauth"
    nova_serial: "{{ nova_api_serial | default(['1', '100%']) }}"



- name: Install nova console/metadata services
  include: common-playbooks/nova.yml
  vars:
    nova_hosts: "nova_api_metadata:nova_console:!nova_conductor:!nova_scheduler:!nova_consoleauth:!nova_api_os_compute:!nova_api_placement"
    nova_serial: "{{ nova_console_serial | default(['1', '100%']) }}"



- name: Install nova compute
  include: common-playbooks/nova.yml
  vars:
    nova_hosts: "nova_compute:!nova_conductor:!nova_scheduler:!nova_consoleauth:!nova_api_os_compute:!nova_api_placement:!nova_api_metadata:!nova_console"
    nova_serial: "{{ nova_compute_serial | default('100%') }}"



# These facts are set against the deployment host to ensure that
# they are fast to access. This is done in preference to setting
# them against each target as the hostvars extraction will take
# a long time if executed against a large inventory.
- name: Refresh local facts after all software changes are made
  hosts: nova_all
  gather_facts: no
  max_fail_percentage: 20
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  tags:
    - nova
  tasks:
    - name: refresh local facts
      setup:
        filter: ansible_local
        gather_subset: "!all"

    # This variable contains the values of the local fact set for the cinder
    # venv tag for all hosts in the 'cinder_all' host group.
    - name: Gather software version list
      set_fact:
        nova_all_software_versions: "{{ (groups['nova_all'] | map('extract', hostvars, ['ansible_local', 'openstack_ansible', 'nova', 'venv_tag'])) | list }}"
      delegate_to: localhost
      run_once: yes

    # This variable outputs a boolean value which is True when
    # nova_all_software_versions contains a list of defined
    # values. If they are not defined, it means that not all
    # hosts have their software deployed yet.
    - name: Set software deployed fact
      set_fact:
        nova_all_software_deployed: "{{ (nova_all_software_versions | select('defined')) | list == nova_all_software_versions }}"
      delegate_to: localhost
      run_once: yes

    # This variable outputs a boolean when all the values in
    # nova_all_software_versions are the same and the software
    # has been deployed to all hosts in the group.
    - name: Set software updated fact
      set_fact:
        nova_all_software_updated: "{{ ((nova_all_software_versions | unique) | length == 1) and (nova_all_software_deployed | bool) }}"
      delegate_to: localhost
      run_once: yes


# Note that the placement API service does not understand how to reload,
# so it fails when you try to make it do so. We therefore skip the reload
# for that service.
- name: Reload all nova services to ensure new RPC object version is used
  hosts: "nova_all:!nova_api_placement"
  gather_facts: no
  serial: "{{ nova_serial | default('100%') }}"
  max_fail_percentage: 20
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  tags:
    - nova
  tasks:
    - name: Execute nova service reload
      include: common-tasks/restart-service.yml
      vars:
        service_name: "nova"
        service_action: "reloaded"
        service_negate: "{{ ['nova-placement-api.service'] + nova_service_negate | default([]) }}"
      when:
        - "nova_all_software_updated | bool"
        - "ansible_local['openstack_ansible']['nova']['need_service_restart'] | bool"



# Note that the placement API service does not understand how to reload,
# so it fails when you try to make it do so. We therefore restart it instead.
- name: Restart the nova placement API service to ensure new RPC object version is used
  hosts: "nova_api_placement"
  gather_facts: no
  serial: "{{ nova_api_serial | default(['1', '100%']) }}"
  max_fail_percentage: 20
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  tags:
    - nova
  tasks:
    - name: Execute nova service restart
      include: common-tasks/restart-service.yml
      vars:
        service_name: "nova-placement-api"
        service_action: "restarted"
        service_fact: "nova"
      when:
        - "nova_all_software_updated | bool"
        - "ansible_local['openstack_ansible']['nova']['need_service_restart'] | bool"



- name: Perform online database migrations
  hosts: nova_conductor
  gather_facts: no
  user: root
  environment: "{{ deployment_environment_variables | default({}) }}"
  tags:
    - nova
  tasks:
    - name: Perform online data migrations
      command: "{{ nova_bin }}/nova-manage db online_data_migrations"
      become: yes
      become_user: "{{ nova_system_user_name }}"
      when:
        - "nova_all_software_updated | bool"
        - "ansible_local['openstack_ansible']['nova']['need_online_data_migrations'] | bool"
      changed_when: false
      run_once: yes
      register: data_migrations

    - name: Disable the online migrations requirement
      ini_file:
        dest: "/etc/ansible/facts.d/openstack_ansible.fact"
        section: nova
        option: need_online_data_migrations
        value: False
      when:
        - data_migrations | succeeded
